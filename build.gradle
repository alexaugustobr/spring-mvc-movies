apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'

group = 'com.github.carlomicieli.nerdmovies'
description = 'A sample application with Spring Framework'

version = "1.2.0-SNAPSHOT"

ext.sourceCompatibility = JavaVersion.VERSION_1_7
ext.targetCompatibility = JavaVersion.VERSION_1_7

// jetty
[jettyRun, jettyRunWar]*.httpPort = 9090
[jettyRun, jettyRunWar]*.contextPath = 'nerdmovies'
[jettyRun, jettyRunWar]*.stopKey = 'rosebud'

jettyStop {
    stopPort = 9090
    stopKey = 'rosebud'
}

configurations {
    componentTestCompile {
        extendsFrom testCompile
    }
    componentTestRuntime {
        extendsFrom componentTestCompile, testRuntime
    }

    integrationTestCompile {
        extendsFrom testCompile
    }
    integrationTestRuntime {
        extendsFrom integrationTestCompile, testRuntime
    }
}

sourceSets {
    componentTest {
        java.srcDir file('src/componentTest/java')
        resources.srcDir file('src/componentTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.componentTestCompile
        runtimeClasspath = output + compileClasspath + configurations.componentTestRuntime
    }

    integrationTest {
        groovy.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

repositories {
    mavenCentral()
    maven {url "http://maven.springframework.org/release/"}
    maven {url "https://repository.jboss.org/nexus/content/repositories/releases/"}
}

def springVersion = "3.2.3.RELEASE"
def securityVersion = "3.1.4.RELEASE"
def springDataVersion = "1.5.0.RELEASE"
def springDataMongoVersion = "1.2.0.RELEASE"
def mongoDriverVersion = "2.10.1"
def hibernateValidationVersion = "4.3.1.Final"
def slf4jVersion = "1.6.1"
def jacksonVersion = "1.9.12"
def gebVersion = "0.7.0"
def junitVersion = "4.11"
def mockitoVersion = "1.9.5"
def thymeleafVersion = "2.0.16"
def tilesVersion = "2.2.2"

dependencies {
    // apache commons
    compile "org.apache.commons:commons-lang3:3.1"

    // spring framework
    compile("org.springframework:spring-context:${springVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
    }

    // spring mvc
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"

    // spring security
    compile("org.springframework.security:spring-security-core:${securityVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    compile("org.springframework.security:spring-security-config:${securityVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    compile("org.springframework.security:spring-security-web:${securityVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    compile "org.springframework.security:spring-security-taglibs:${securityVersion}"

    // logging
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
            "org.slf4j:slf4j-log4j12:${slf4jVersion}",
            "log4j:log4j:1.2.16"

    // GCLIB, required for @Configuration usage
    compile "cglib:cglib-nodep:2.2.2"

    // Servlet Api
    providedCompile "javax.servlet:servlet-api:2.5"
    compile "javax.servlet:jstl:1.2"

    // Thymeleaf
    compile "org.thymeleaf:thymeleaf:${thymeleafVersion}",
        "org.thymeleaf:thymeleaf-spring3:${thymeleafVersion}",
        "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.0.0",
        "org.thymeleaf.extras:thymeleaf-extras-tiles2:2.0.0",
        "org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.0.0"

    // Apache Tiles
    compile "org.apache.tiles:tiles-core:${tilesVersion}",
        "org.apache.tiles:tiles-api:${tilesVersion}",
        "org.apache.tiles:tiles-template:${tilesVersion}",
        "org.apache.tiles:tiles-servlet:${tilesVersion}",
        "org.apache.tiles:tiles-jsp:${tilesVersion}"

    // JSR 303 with Hibernate Validator
    compile "javax.validation:validation-api:1.0.0.GA"
    compile "org.hibernate:hibernate-validator:${hibernateValidationVersion}",
            "org.hibernate:hibernate-validator-annotation-processor:${hibernateValidationVersion}"

    // imgscalr
    compile "org.imgscalr:imgscalr-lib:4.2"

    // files upload
    compile "commons-fileupload:commons-fileupload:1.2.2",
            "commons-io:commons-io:2.1"

    // spring data mongodb
    compile "org.springframework.data:spring-data-commons:${springDataVersion}"
    compile "org.springframework.data:spring-data-mongodb:${springDataMongoVersion}"
    compile "org.mongodb:mongo-java-driver:${mongoDriverVersion}"

    // jackson JSON
    compile "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}"
    compile "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}"

    // unit testing
    testCompile "junit:junit:${junitVersion}",
            "org.mockito:mockito-core:${mockitoVersion}",
            "org.springframework:spring-test:${springVersion}"

    // integration tests
    integrationTestCompile "org.codehaus.groovy:groovy:2.0.8"
    integrationTestCompile "org.spockframework:spock-core:0.7-groovy-2.0",
            "org.codehaus.geb:geb-core:${gebVersion}",
            "org.codehaus.geb:geb-spock:${gebVersion}",
            "org.seleniumhq.selenium:selenium-htmlunit-driver:2.20.0"
}

// wrapper task to create the download script
task wrapper(type: Wrapper, group: 'Gradle wrapper', description: 'Gradle will be automatically downloaded and used to run the build.') {
    gradleVersion = '1.6'
}

// component testing:	the same as unit testing except that all stubs
//						and simulators are replaced with the real thing.
task componentTest(description: 'Runs the component tests.', group: 'Verification', type: Test) {
    testClassesDir = sourceSets.componentTest.output.classesDir
    classpath = sourceSets.componentTest.runtimeClasspath
}
check.dependsOn componentTest

// integration testing: the application is deployed to the web container
task integrationTest(description: 'Runs the integration tests.', group: 'Verification', type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    doFirst {
        [jettyRun, jettyRunWar]*.daemon = true
        tasks.jettyRun.execute()
    }

    doLast {
        tasks.jettyStop.execute()
    }
}
//check.dependsOn integrationTest

