// ====================== plugins ====================== //
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'

group = 'com.github.carlomicieli'
description = 'A sample application'

version = "1.0.0-SNAPSHOT"

// jetty
httpPort = 9090

// ====================== sets ======================= //

sourceSets {
    componentTest {
		java.srcDir file('src/componentTest/java')
        resources.srcDir file('src/componentTest/resources')
    }

    integrationTest {
		groovy.srcDir file('src/integrationTest/groovy')
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
    }
}

// ====================== repositories ================= //
repositories {
    mavenCentral()
    maven {url "http://maven.springframework.org/milestone"}
}

// ====================== dependencies ================= //
def springVersion = "3.1.1.RELEASE"
def securityVersion = "3.1.0.RELEASE"
def slf4jVersion = "1.6.1"

dependencies {
	// spring framework
	compile("org.springframework:spring-context:${springVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	
	// spring mvc
	compile "org.springframework:spring-webmvc:${springVersion}"
	
	// spring security
	compile("org.springframework.security:spring-security-config:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile("org.springframework.security:spring-security-web:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile "org.springframework.security:spring-security-taglibs:${securityVersion}"

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
		"org.slf4j:slf4j-log4j12:${slf4jVersion}",
		"log4j:log4j:1.2.16"

	// GCLIB, required for @Configuration usage
	compile "cglib:cglib-nodep:2.2.2"
	
	// Servlet Api
	providedCompile "javax.servlet:servlet-api:2.5"
	compile "javax.servlet:jstl:1.2"

	// Sitemesh
	runtime "opensymphony:sitemesh:2.4.2"
	
	// Thymeleaf
	runtime "org.thymeleaf:thymeleaf:2.0.4"
	runtime "org.thymeleaf:thymeleaf-spring3:2.0.4"
	
	// JSR 303 with Hibernate Validator
	runtime "javax.validation:validation-api:1.0.0.GA"
	runtime "org.hibernate:hibernate-validator:4.0.2.GA"

	// files upload
	compile "commons-fileupload:commons-fileupload:1.2.2",
		"commons-io:commons-io:2.1"
	
	// mongodb
	compile "org.springframework.data:spring-data-mongodb-dist:1.0.1.RELEASE"
	compile "org.mongodb:mongo-java-driver:2.7.3"

	// unit testing
	testCompile "junit:junit:4.10",
		"org.mockito:mockito-all:1.9.0",
		"org.springframework:spring-test:${springVersion}"

	// component tests
	componentTestCompile sourceSets.main.output
    componentTestCompile configurations.testCompile
    componentTestCompile sourceSets.test.output
    componentTestRuntime configurations.testRuntime

	// integration tests
	groovy "org.codehaus.groovy:groovy-all:1.8.6"
	integrationTestCompile "org.spockframework:spock-core:0.6-groovy-1.8",
		"org.seleniumhq.selenium:selenium-api:2.20.0",
		"org.seleniumhq.selenium:selenium-htmlunit-driver:2.20.0"
	integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

// ====================== tasks ======================== //

// directory creation
task createDirs(description: 'Creates the directory for the project.', group: 'Project') << {
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	sourceSets.integrationTest*.groovy.srcDirs*.each { it.mkdirs() }
	
	[webAppDirName, webAppDirName + '/META-INF', webAppDirName + '/WEB-INF'].each { file(it).mkdirs() }
}

task initProj(description: 'Project init.', group: 'IDE', dependsOn: ['cleanEclipse', 'createDirs', 'eclipse']) << {
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-9'
}

// component testing:	the same as unit testing except that all stubs
//						and simulators are replaced with the real thing.
task componentTest(description: 'Runs the component tests.', group: 'Verification', type: Test) {
	testClassesDir = sourceSets.componentTest.output.classesDir
	classpath = sourceSets.componentTest.runtimeClasspath
}
check.dependsOn componentTest

// integration testing: the application is deployed to the web container
task integrationTest(description: 'Runs the integration tests.', group: 'Verification', type: Test, dependsOn: jettyRun) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	systemProperties['jar.path'] = jar.archivePath
}
check.dependsOn integrationTest

