//! /spring-mvc-movies/build.gradle

// ====================== plugins ====================== //
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'eclipse-wtp'

group = 'com.github.carlomicieli'
description = 'A sample application with Spring Framework'

version = "1.0.0-SNAPSHOT"

// tomcat
[tomcatRun, tomcatRunWar]*.httpPort = 9090
[tomcatRun, tomcatRunWar]*.contextPath = 'spring-mvc-movies'
[tomcatRun, tomcatRunWar]*.stopKey = 'rosebud'

tomcatStop {
	stopPort = 9090
	stopKey = 'rosebud'
}

buildscript {
	repositories {
		add(new org.apache.ivy.plugins.resolver.URLResolver()) {
			name = 'GitHub'
			addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
		}
	}

	dependencies {
		classpath 'bmuschko:gradle-tomcat-plugin:0.9.1'
	}
}

// ====================== sets ======================= //
configurations {
	componentTestCompile {
		extendsFrom testCompile
	}
	componentTestRuntime {
		extendsFrom componentTestCompile, testRuntime
	}

	integrationTestCompile {
		extendsFrom testCompile
	}
	integrationTestRuntime {
		extendsFrom integrationTestCompile, testRuntime
	}
}

sourceSets {
    componentTest {
		java.srcDir file('src/componentTest/java')
        resources.srcDir file('src/componentTest/resources')
		compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.componentTestCompile
		runtimeClasspath = output + compileClasspath + configurations.componentTestRuntime
    }

	integrationTest {
		groovy.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/integrationTest/resources')
		compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
		runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

// ====================== repositories ================= //
repositories {
    mavenCentral()
    maven {url "http://maven.springframework.org/release/"}
	maven {url "https://repository.jboss.org/nexus/content/repositories/releases/"}
}

// ====================== dependencies ================= //
def springVersion = "3.1.1.RELEASE"
def securityVersion = "3.1.0.RELEASE"
def slf4jVersion = "1.6.1"
def tomcatVersion = "7.0.26"
def jacksonVersion = "1.9.6"
def gebVersion = "0.7.0"

dependencies {
	// spring framework
	compile("org.springframework:spring-context:${springVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	
	// spring mvc
	compile "org.springframework:spring-webmvc:${springVersion}"
	compile "org.springframework:spring-web:${springVersion}"
	
	// spring security
	compile("org.springframework.security:spring-security-core:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile("org.springframework.security:spring-security-config:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile("org.springframework.security:spring-security-web:${securityVersion}") {
		exclude group: "commons-logging", module: "commons-logging"
	}
	compile "org.springframework.security:spring-security-taglibs:${securityVersion}"

	// spring social
	compile "org.springframework.social:spring-social-core:1.0.2.RELEASE"

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
		"org.slf4j:slf4j-log4j12:${slf4jVersion}",
		"log4j:log4j:1.2.16"

	// GCLIB, required for @Configuration usage
	compile "cglib:cglib-nodep:2.2.2"
	
	// Servlet Api
	providedCompile "javax.servlet:servlet-api:2.5"
	compile "javax.servlet:jstl:1.2"

	// Sitemesh
	compile "opensymphony:sitemesh:2.4.2"
	
	// Thymeleaf
	compile "org.thymeleaf:thymeleaf:2.0.4"
	compile "org.thymeleaf:thymeleaf-spring3:2.0.4"
	
	// JSR 303 with Hibernate Validator
	compile "javax.validation:validation-api:1.0.0.GA"
	compile "org.hibernate:hibernate-validator:4.2.0.Final"

	// imgscalr
	compile "org.imgscalr:imgscalr-lib:4.2"

	// files upload
	compile "commons-fileupload:commons-fileupload:1.2.2",
		"commons-io:commons-io:2.1"
	
	// mongodb
	compile "org.springframework.data:spring-data-mongodb:1.0.1.RELEASE"
	compile "org.mongodb:mongo-java-driver:2.7.3"

	// jackson JSON
	compile "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}"
	
	// unit testing
	testCompile "junit:junit:4.10",
		"org.mockito:mockito-all:1.9.0",
		"org.springframework:spring-test:${springVersion}"

	// integration tests
	groovy "org.codehaus.groovy:groovy-all:1.8.6"
	integrationTestCompile "org.spockframework:spock-core:0.6-groovy-1.8",
		"org.codehaus.geb:geb-core:${gebVersion}",
		"org.codehaus.geb:geb-spock:${gebVersion}",
		"org.seleniumhq.selenium:selenium-htmlunit-driver:2.20.0"
		
	// tomcat 7
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
		   "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
		exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
}

// ====================== eclipse ===================== //
eclipse {
	// add the integration classpath
	classpath {
		plusConfigurations += configurations.componentTestRuntime
		plusConfigurations += configurations.integrationTestRuntime

		//default settings for dependencies sources/javadoc download:
		downloadSources = true
		downloadJavadoc = false
	}
	wtp {
		component {
			contextPath = 'spring-mvc-movies'
		}
	}
}

// ====================== tasks ======================== //

// directory creation
task createDirs(description: 'Creates the directory for the project.', group: 'Project') << {
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	sourceSets.integrationTest*.groovy.srcDirs*.each { it.mkdirs() }
	
	[webAppDirName, webAppDirName + '/META-INF', webAppDirName + '/WEB-INF'].each { file(it).mkdirs() }
}

// wrapper task to create the download script
task wrapper(type: Wrapper, group: 'Gradle wrapper', description: 'Gradle will be automatically downloaded and used to run the build.') {
	gradleVersion = '1.0-milestone-9'
}

// component testing:	the same as unit testing except that all stubs
//						and simulators are replaced with the real thing.
task componentTest(description: 'Runs the component tests.', group: 'Verification', type: Test) {
	testClassesDir = sourceSets.componentTest.output.classesDir
	classpath = sourceSets.componentTest.runtimeClasspath
}
check.dependsOn componentTest

// integration testing: the application is deployed to the web container
task integrationTest(description: 'Runs the integration tests.', group: 'Verification', type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath

	doFirst {
		[tomcatRun, tomcatRunWar]*.daemon = true
		tasks.tomcatRun.execute()
	}

	doLast {
		tasks.tomcatStop.execute()
	}
}
//check.dependsOn integrationTest

